@import './vars.scss';

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin noselect {
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

%noselect {
  @include noselect;
}

%clearfix {
  @include clearfix;
}



.query-builder {
  @extend %noselect;
  overflow: hidden;
  font-family: $main-font-family;
  font-size: $main-font-size;
  color: $main-text-color;
  line-height: 1.25;
  margin: 1rem;
}


.query-builder {
  .group {
    background: $group-background;
    border: $group-border solid $group-border-color;
    border-left: $group-border-left solid $group-border-color;
  }

  .rule {
    background-color: $rule-background;
    border: $rule-border solid $rule-border-color;
    border-left: $rule-border-left solid $rule-border-color;
    padding: $rule-padding;
  }

  .rule-with-error .rule {
    border-color: $rule-with-error-border-color;
  }

  .group-with-error > .group {
    border-color: $group-with-error-border-color;
  }

  .rule--body {
    display: flex;
    flex-wrap: wrap;
    text-align: center;
  }

  .rule--body--wrapper {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .rule--error {
    color: $rule-error-color;
    margin-bottom: -5px;
    margin-top: 5px;
  }

  .rule_group--error {
    color: $rule-error-color;
    margin-bottom: -5px;
    margin-top: 5px;
    width: 100%;
  }

  .group-or-rule {
    border-radius: $item-radius;
    position: relative;
  }

  .rule_group {
    background: $rulegroup-background;
    border: $rulegroup-border solid $rulegroup-border-color;
    border-left: $rulegroup-border-left solid $rulegroup-border-color;
  }

  .rule_group_ext {
    background: $rulegroupext-background;
    border: $rulegroupext-border solid $rulegroupext-border-color;
    border-left: $rulegroupext-border-left solid $rulegroupext-border-color;
  }

  // inside rule_group
  .rule_group .rule {
    background: $rule-in-rulegroup-background;
    border: $rule-border solid $rule-in-rulegroup-border-color;
    border-left: $rule-border-left solid $rule-in-rulegroup-border-color;
  }
  .rule_group .rule_group {
    background: $rulegroup-in-rulegroup-background;
    border: $rulegroup-in-rulegroup-border solid $rulegroup-in-rulegroup-border-color;
    border-left: $rulegroup-in-rulegroup-border-left solid $rulegroup-in-rulegroup-border-color;
  }
  .rule_group .rule_group_ext {
    background: $rulegroupext-in-rulegroup-background;
    border: $rulegroupext-in-rulegroup-border solid $rulegroupext-in-rulegroup-border-color;
    border-left: $rulegroupext-in-rulegroup-border-left solid $rulegroupext-in-rulegroup-border-color;
  }

  // inside rule_group_ext
  .rule_group_ext .rule {
    background: $rule-in-rulegroupext-background;
    border: $rule-border solid $rule-in-rulegroupext-border-color;
    border-left: $rule-border-left solid $rule-in-rulegroupext-border-color;
  }
  .rule_group_ext .group {
    background: $group-in-rulegroupext-background;
    border: $group-in-rulegroupext-border solid $group-in-rulegroupext-border-color;
    border-left: $group-in-rulegroupext-border-left solid $group-in-rulegroupext-border-color;
  }
  .rule_group_ext .rule_group_ext {
    background: $rulegroupext-in-rulegroupext-background;
    border: $rulegroupext-in-rulegroupext-border solid $rulegroupext-in-rulegroupext-border-color;
    border-left: $rulegroupext-in-rulegroupext-border-left solid $rulegroupext-in-rulegroupext-border-color;
  }
  .rule_group_ext .rule_group {
    background: $rulegroup-in-rulegroupext-background;
    border: $rulegroup-in-rulegroupext-border solid $rulegroup-in-rulegroupext-border-color;
    border-left: $rulegroup-in-rulegroupext-border-left solid $rulegroup-in-rulegroupext-border-color;
  }

  .locked {
    border-color: $locked-border-color !important;
    border-style: dashed !important;
  }

  .qb-placeholder {
    border-color: $placeholder-border-color !important;
    border-style: dashed !important;
  }


  /******************************************************************************/
  /** DRAG *********************************************************************/
  /******************************************************************************/


  &.qb-dragging {
    cursor: -webkit-grabbing !important;
    cursor: grabbing !important;
    button {
      pointer-events: none;
    }
  }

  .qb-draggable {
    @extend %noselect;
    pointer-events: none;
    position: absolute;
    opacity: 0.7;
    z-index: 1000;

    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
  }

  .qb-drag-handler {
    @extend %noselect;
    cursor: -webkit-grabbing;
    cursor: grabbing;
  }


  /******************************************************************************/
  /** TREE LINES *********************************************************************/
  /******************************************************************************/


  @mixin line_position_for_item($item-border-left, $item-border, $item-offset-left, $item-offset, $treeline-thick) {
    &::before {
      border-width: 0 0 $treeline-thick $treeline-thick;
      top: calc(-1 * $item-border);
      height: calc(50% + $treeline-thick / 2 + $item-border);
    }

    &::after {
      border-width: 0 0 0 $treeline-thick;
      top: calc(50% + $treeline-thick / 2);
      height: calc(50% - $treeline-thick / 2 + $item-offset + $item-border);
    }

    &::before, &::after {
      left: calc(-1 * ($item-offset-left / 2 + $treeline-thick / 2 + $item-border-left));
      width: calc($item-offset-left / 2 + $treeline-thick / 2);
    }
  }

  @mixin line_positions_for_group(
    $item-offset-left, $item-offset,
    $treeline-thick, $treeline-radius, $treeline-color,
    $rule-border, $group-border, $rulegroup-border, $rulegroupext-border,
    $rule-border-left, $group-border-left, $rulegroup-border-left, $rulegroupext-border-left
  ) {
    & > .group-or-rule-container:last-child {
      & > .group-or-rule {
        &::before {
          border-radius: 0 0 0 $treeline-radius;
        }
      }
    }
    & > .group-or-rule-container {
      & > .group-or-rule {
        &::before, &::after {
          border-color: $treeline-color;
        }
        @include line_position_for_item($rule-border-left, $rule-border, $item-offset-left, $item-offset, $treeline-thick);
      }
      & > .group {
        @include line_position_for_item($group-border-left, $group-border, $item-offset-left, $item-offset, $treeline-thick);
      }
      & > .rule_group {
        @include line_position_for_item($rulegroup-border-left, $rulegroup-border, $item-offset-left, $item-offset, $treeline-thick);
      }
      & > .rule_group_ext {
        @include line_position_for_item($rulegroupext-border-left, $rulegroupext-border, $item-offset-left, $item-offset, $treeline-thick);
      }
    }
  }

  @mixin line_position_for_header($treeline-offset-from-conjs, $item-offset-left, $treeline-thick, $treeline-color) {
    &::before {
      border-color: $treeline-color;
      border-width: 0 0 0 $treeline-thick;
      top: calc($treeline-offset-from-conjs);
      height: calc(100% + $item-offset - $treeline-offset-from-conjs);
      left: calc(+1 * ($item-offset-left / 2 - $treeline-thick / 2));
      width: calc($item-offset-left / 2 + $treeline-thick / 2);
    }
  }

  @mixin hide_conjs_for_group(
    $item-offset, $treeline-thick, $treeline-radius,
    $rule-border, $group-border, $rulegroup-border, $rulegroupext-border
  ) {
    & > .group-or-rule-container:first-child {
      & > .group-or-rule {
        &::before {
          display: none;
        }
        &::after {
          border-radius: $treeline-radius 0 0 0;
          border-width: $treeline-thick 0 0 $treeline-thick;
        }
        &::after {
          top: calc(50% - $treeline-thick / 2);
          height: calc(50% + $treeline-thick / 2 + $item-offset + $rule-border);
        }
      }
      & > .group {
        &::after {
          height: calc(50% + $treeline-thick / 2 + $item-offset + $group-border);
        }
      }
      & > .rule_group {
        &::after {
          height: calc(50% + $treeline-thick / 2 + $item-offset + $rulegroup-border);
        }
      }
      & > .rule_group_ext {
        &::after {
          height: calc(50% + $treeline-thick / 2 + $item-offset + $rulegroupext-border);
        }
      }
    }
  }

  // line between conjs and children
  .group--header:not(.no--children):not(.hide--conjs) {
    position: relative;

    &::before {
      z-index: 0;
      content: '';
      position: absolute;
      border-color: $treeline-color;
      border-style: solid;
      -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
      box-sizing: border-box;
    }

    &.hide--line {
      &::before {
        border-color: $treeline-disabled-color !important;
      }
    }
  }

  // lines between items
  .group--children {
    & > .group-or-rule-container > .group-or-rule {
      &::before, &::after {
        content: '';
        position: absolute;
        border-color: $treeline-color;
        border-style: solid;    
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
      }
    }
    & > .group-or-rule-container:last-child > .group-or-rule {
      &::after {
        display: none;
      }
    }

    // don't connect line to conjs
    &.hide--conjs {
      @include hide_conjs_for_group(
        $item-offset, $treeline-thick, $treeline-radius,
        $rule-border, $group-border, $rulegroup-border, $rulegroupext-border
      );
    }

    // gray line
    &.hide--line {
      & > .group-or-rule-container > .group-or-rule {
        &::before, &::after {
          border-color: $treeline-disabled-color !important;
        }
      }
    }
  }

  // inside group
  .group--children {
    @include line_positions_for_group(
      $item-offset-left, $item-offset,
      $treeline-thick, $treeline-radius, $treeline-color,
      $rule-border, $group-border, $rulegroup-border, $rulegroupext-border,
      $rule-border-left, $group-border-left, $rulegroup-border-left, $rulegroupext-border-left
    );
  }

  // inside rule_group
  .rule_group--children {
    @include line_positions_for_group(
      $rulegroup-offset-left, $rulegroup-offset,
      $treeline-rulegroup-thick, $treeline-radius, $treeline-rulegroup-color,
      $rule-border, $group-border, $rulegroup-in-rulegroup-border, $rulegroupext-in-rulegroup-border,
      $rule-border-left, $group-border-left, $rulegroup-in-rulegroup-border-left, $rulegroupext-in-rulegroup-border-left
    );
    &, &.hide--conjs {
      @include hide_conjs_for_group(
        $rulegroup-offset, $treeline-rulegroup-thick, $treeline-radius,
        $rule-border, $group-border, $rulegroup-in-rulegroup-border, $rulegroupext-in-rulegroup-border
      );
    }
  }

  // inside rule_group_ext
  .rule_group_ext--children,
  .rule_group_ext--children .group--children:not(.rule_group--children) {
    @include line_positions_for_group(
      $item-offset-left, $item-offset,
      $treeline-rulegroupext-thick, $treeline-radius, $treeline-rulegroupext-color,
      $rule-border, $group-in-rulegroupext-border, $rulegroup-in-rulegroupext-border, $rulegroupext-in-rulegroupext-border,
      $rule-border-left, $group-in-rulegroupext-border-left, $rulegroup-in-rulegroupext-border-left, $rulegroupext-in-rulegroupext-border-left
    );
    &.hide--conjs {
      @include hide_conjs_for_group(
        $item-offset, $treeline-rulegroupext-thick, $treeline-radius,
        $rule-border, $group-in-rulegroupext-border, $rulegroup-in-rulegroupext-border, $rulegroupext-in-rulegroupext-border
      );
    }
  }

  // switch
  .switch_group--children {
    @include line_positions_for_group(
      $item-offset-left, $item-offset,
      $treeline-switch-thick, $treeline-radius, $treeline-switch-color,
      $rule-border, $case-border, $rulegroup-border, $rulegroupext-border,
      $rule-border-left, $case-border-left, $rulegroup-border-left, $rulegroupext-border-left
    );
  }

  // header
  .group--header:not(.no--children):not(.hide--conjs) {
    @include line_position_for_header($treeline-offset-from-conjs, $item-offset-left, $treeline-thick, $treeline-color);
  }
  .rule_group_ext,
  .rule_group_ext .group {
    & > .group--header:not(.no--children):not(.hide--conjs) {
      @include line_position_for_header($treeline-offset-from-conjs, $item-offset-left, $treeline-rulegroupext-thick, $treeline-rulegroupext-color);
    }
  }
  .switch_group {
    & > .group--header:not(.no--children):not(.hide--conjs) {
      @include line_position_for_header($treeline-offset-from-switch, $item-offset-left, $treeline-switch-thick, $treeline-switch-color);
    }
  }

  .qb-draggable {
    &::before, &::after {
      display: none;
    }
  }


  /******************************************************************************/
  /** GROUP *********************************************************************/
  /******************************************************************************/


  .group--header,
  .group--footer {
    display: flex;
    align-items: stretch;

    padding: {
      left: calc($item-offset-left / 2 - $treeline-thick);
      right: $item-offset;
    }
    margin: {
      top: $item-offset;
      bottom: $item-offset;
    }
  }

  .group-or-rule-container {
    margin-top: $item-offset;
    margin-bottom: $item-offset;
    padding-right: $item-offset;
    &:first-child {
      margin-top: 0px !important;
    }
    &:last-child {
      margin-bottom: 0px !important;
    }
  }

  .group--drag-handler {
    margin-right: $drag-offset-right;
    margin-top: 3px;
    position: relative;
    align-self: center;
  }
  .group--conjunctions {
    flex-shrink: 0;
    display: flex;

    .group--drag-handler {
      margin-left: $group-drag-offset-left;
    }
  }


  .group--children {
    padding-left: $item-offset-left;
    margin-top: $item-offset;
    margin-bottom: $item-offset;

    .group--field--count--rule {
      display: flex;
      flex-wrap: wrap;
      flex: 1;
    }
  }


  .group--conjunctions.hide--conj {
    opacity: 0.3;
  }

  .group--actions {
    align-self: center;
    margin-left: $group-actions-offset-left;
    flex: 1;
    display: flex;

    &--tl,
    &--bl{
      justify-content: flex-start;
    }

    &--tl{
      margin-left: calc($group-actions-offset-left * 2);
    }

    &--tc,
    &--bc {
      justify-content: center;
    }

    &--tr,
    &--br{
      justify-content: flex-end;
    }

    // .action--DELETE {
    //   margin-top: -1px;
    // }
  }

  /******************************************************************************/
  /** CASE_GROUP *********************************************************************/
  /******************************************************************************/

  .case_group {
    border-width: $case-border;
    border-left-width: $case-border-left;

    .case_group--body {
      display: flex;
      flex-direction: row;
      margin-top: $item-offset;
      margin-bottom: $item-offset;
    
      .case_group--children {
        flex: auto;
        margin-top: 0 !important;
        margin-bottom: 0 !important;
      }
    }

    .case_group--value {
      margin-top: 0;
      margin-bottom: 0;
      margin-left: $item-offset;
      margin-right: $item-offset;
    }
  }

  /******************************************************************************/
  /** RULE_GROUP *********************************************************************/
  /******************************************************************************/

  .rule_group {
    display: flex;
    flex-wrap: wrap;
    padding-left: $rule-padding;

    > .group--field {
      margin-top: $item-offset;
      margin-bottom: $item-offset;
      align-self: center;
    }
    > .group--actions {
      margin-left: $rule-group-actions-offset-left;
      align-self: center;
      flex: 0;
    }

    > .rule_group--children {
      flex: 1;

      margin-top: $rulegroup-offset;
      margin-bottom: $rulegroup-offset;
      padding-left: $rulegroup-offset-left;

      > .group-or-rule-container {
        margin-bottom: $rulegroup-offset;
        margin-top: $rulegroup-offset;
        padding-right: $rulegroup-offset;
      }

      &.one--child {
        padding-left: calc($rulegroup-offset-left / 2);
      }

    }
  }

  /******************************************************************************/
  /** RULE_GROUP_EXT *********************************************************************/
  /******************************************************************************/

  .rule_group_ext > .group--header .group--actions {
    flex: none;
  }

  .group--header.hide--drag.with--conjs {
    & > .group--field--count--rule {
      margin-left: 20px;
    }
  }

  /******************************************************************************/
  /** RULE **********************************************************************/
  /******************************************************************************/

  .rule {
    flex: 1;
    display: flex;
  }

  //"remove" button
  .rule--header {
    @extend %clearfix;
    margin-left: auto;
    display: flex;
    align-items: center;
    padding-left: 10px;
  }

  .rule--drag-handler {
    display: flex;
    align-items: center;
    margin-right: $drag-offset-right;
  }

  $rule_items: ".rule--field", ".rule--fieldsrc", ".group--field", ".rule--operator", ".rule--value", ".rule--operator-options", ".rule--widget", 
  ".widget--widget", ".widget--valuesrc", ".widget--sep", ".operator--options--sep",
  ".rule--before-widget", ".rule--after-widget";
  
  $seps: ".widget--sep", ".operator--options--sep", ".rule--func--bracket-before", ".rule--func--bracket-after", ".rule--func--arg-sep";

  #{$rule_items} {
    display: inline-block;
  }

  // seps
  #{$seps} {
    vertical-align: bottom;
    align-self: flex-end;
    margin-bottom: $seps-offset-bottom;
  }
  .rule--func--arg-sep {
    margin-bottom: calc($seps-offset-bottom - 5px);
  }
  .widget--sep {
    margin-left: $rule-parts-distance;
    margin-right: $rule-parts-distance;
  }
  .widget--sep.widget--sep-first {
    margin-right: $rule-parts-distance;
    margin-left: 0;
  }
  .rule--operator {
    // more distinction between LHS and RHS
    margin-left: calc($rule-parts-distance * 2);
    margin-right: calc($rule-parts-distance * 2);
  }
  .operator--options--sep {
    margin-right: $rule-parts-distance;
  }
  .rule--func--arg-sep {
    margin-left: 3px;
    margin-right: 6px;
  }
  .rule--func--bracket-after {
    margin-left: calc($rule-parts-distance / 2);
    margin-right: 2px; // small
  }
  .rule--func--bracket-before {
    margin-left: calc($rule-parts-distance / 2);
    margin-right: calc($rule-parts-distance / 2);
  }


  // .rule--func--arg-label-sep {
  //   margin-left: 1px;
  //   margin-right: 6px;
  // }

  // valuesrc
  .widget--valuesrc {
    //margin-left: calc(-1 * $rule-parts-distance + 2px); // be closer to widget
    //margin-right: calc(-1 * $rule-parts-distance + 2px); // be closer to widget
    vertical-align: top;
  }
  .rule--fieldsrc {
    // margin-right: calc(-1 * $rule-parts-distance + 2px); // be closer to widget
    vertical-align: top;
  }

  .operator--options {
    display: flex;
  }


  .rule--operator-wrapper {
    display: flex;
    flex-direction: column;
    height: 100%;
  }
  .rule--operator-text-wrapper {
    flex: 1;
    display: flex;
    align-items: center;
  }

  div.tooltip-inner {
    max-width: 500px;
  }

  .rule--label {
    display: block;
    font-weight: bold;
  }


  /******************************************************************************/
  /** FUNC **********************************************************************/
  /******************************************************************************/


  $rule_func_items: ".rule--func--wrapper", ".rule--func", ".rule--func--args", ".rule--func--arg", ".rule--func--arg-value", 
    ".rule--func--bracket-before", ".rule--func--bracket-after", ".rule--func--arg-sep",
    ".rule--func--arg-label", ".rule--func--arg-label-sep";

  #{$rule_func_items} {
    display: inline-block;
  }

  .rule--func--wrapper {
    display: flex;
    flex-wrap: wrap;
  }
  .rule--func--args {
    display: flex;
    flex-wrap: wrap;
  }
  .rule--func--arg {
    display: flex;
  }


  // containers
  .rule--field-wrapper,
  .rule--field--func, 
  .rule--func--wrapper, 
  .rule--func--args, 
  .rule--func--arg, 
  .rule--func--arg-value, 
  .rule--func--arg-value > .rule--widget,
  .widget--func {
    display: contents;
  }

  // multiline distance
  .rule--func, .widget--widget {
    margin-bottom: 2px;
  }
  .rule--body--wrapper {
    margin-bottom: -2px;
  }


  /******************************************************************************/
  /** Shrink textarea ***********************************************************/
  /******************************************************************************/


  .rule--body.can--shrink--value {
    //align-items: center;
    .rule--value {
      flex: 1;
      & > .rule--widget {
        width: 100%;
        display: flex;
        & .widget--widget {
          flex: 1;
        }
      }
    }
  }
}


/******************************************************************************/
/** Minimalism ****************************************************************/
/******************************************************************************/


@mixin visible_only_for_hovered_group($what) {
  @if $what {
    #{$what} {
      transition: opacity 0.2s;
    }
    .group--header:hover .group--header,
    .group--header:not(:hover),
    .rule_group:not(:hover) {
      #{$what} {
        opacity: 0;
      }
    }
  }
}

@mixin display_conjs_only_for_hovered_group($inactive, $active) {
  @if $inactive {
    #{$inactive} {
      transition: 0.2s;
    }
    .group-or-rule:not(.qb-draggable, .qb-placeholder) > .group--header:hover .group--header,
    .group-or-rule:not(.qb-draggable, .qb-placeholder) > .group--header:not(:hover),
    .rule_group:not(:hover) {
      .group--conjunctions {
        #{$inactive} {
          width: 0;
          min-width: 0;
          padding: 0;
          overflow: hidden;
          opacity: 0;
        }
      }
    }
  }
}

@mixin show_only_for_hovered_rule($what) {
  @if $what {
    #{$what} {
      transition: opacity 0.2s;
    }
    .rule:hover .rule,
    .rule:not(:hover) {
      #{$what} {
        opacity: 0;
      }
    }
  }
}

@mixin force_unvisible($what) {
  @if $what {
    #{$what} {
      opacity: 0 !important;
    }
  }
}

@mixin force_not_display_conjs($what) {
  @if $what {
    .group-or-rule:not(.qb-draggable, .qb-placeholder) > .group--header {
      .group--conjunctions {
        #{$what} {
          width: 0 !important;
          min-width: 0 !important;
          padding: 0 !important;
          overflow: hidden !important;
          opacity: 0 !important;
        }
      }
    }
  }
}

$group_actions: (".group--drag-handler", ".group--actions") !default;
$inactive_conjs: false !default;
$active_conjs: false !default;
$rule_actions: (".rule--fieldsrc", ".widget--valuesrc", ".rule--drag-handler", ".rule--header") !default;


.query-builder.qb-lite {
  @include visible_only_for_hovered_group($group_actions);
  @include display_conjs_only_for_hovered_group($inactive_conjs, $active_conjs);
  @include show_only_for_hovered_rule($rule_actions);

  &.qb-dragging {
    @include force_unvisible(#{$rule_actions, $group_actions});
    @include force_not_display_conjs($inactive_conjs);
  }
}
