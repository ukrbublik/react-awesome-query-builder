import { Utils, Config } from "@react-awesome-query-builder/ui";
import { Theme, PartialTheme, css } from "@fluentui/react";
const { setOpacityForHex, generateCssVarsForLevels, chroma } = Utils.ColorUtils;
const { logger } = Utils.OtherUtils;

const buildTheme = (config: Config): PartialTheme | undefined => {
  const themeMode = config.settings.themeMode;
  const darkMode = themeMode === "dark";
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  const themeConfig = config.settings.theme?.fluent;
  // todo: theme obj can be set in settings
  const canCreateTheme = !!themeConfig || themeMode;
  if (!canCreateTheme) {
    return undefined;
  }

  // https://developer.microsoft.com/en-us/fluentui#/controls/web/themeprovider
  const darkTheme: PartialTheme = {
    // https://github.com/microsoft/fluentui/issues/9795#issuecomment-511882323
    palette: {
      neutralLighterAlt: "#282828",
      neutralLighter: "#313131",
      neutralLight: "#3f3f3f",
      neutralQuaternaryAlt: "#484848",
      neutralQuaternary: "#4f4f4f",
      neutralTertiaryAlt: "#6d6d6d",
      neutralTertiary: "#c8c8c8",
      neutralSecondary: "#d0d0d0",
      neutralPrimaryAlt: "#dadada",
      neutralPrimary: "#ffffff",
      neutralDark: "#f4f4f4",
      black: "#f8f8f8",
      white: "#1f1f1f",
      themePrimary: "#3a96dd",
      themeLighterAlt: "#020609",
      themeLighter: "#091823",
      themeLight: "#112d43",
      themeTertiary: "#235a85",
      themeSecondary: "#3385c3",
      themeDarkAlt: "#4ba0e1",
      themeDark: "#65aee6",
      themeDarker: "#8ac2ec",
      accent: "#3a96dd"
    }
  };

  const lightTheme: PartialTheme = {
    // Generated by Copilot AI
    palette: {
      neutralLighterAlt: "#f3f2f1",
      neutralLighter: "#edebe9",
      neutralLight: "#eaeaea",
      neutralQuaternaryAlt: "#e1dfdd",
      neutralQuaternary: "#d0d0d0",
      neutralTertiaryAlt: "#c8c6c4",
      neutralTertiary: "#605e5c",
      neutralSecondary: "#323130",
      neutralPrimaryAlt: "#3b3a39",
      neutralPrimary: "#333333",
      neutralDark: "#201f1e",
      black: "#000000",
      white: "#ffffff",
      themePrimary: "#0078d4",
      themeLighterAlt: "#020609",
      themeLighter: "#091823",
      themeLight: "#112d43",
      themeTertiary: "#235a85",
      themeSecondary: "#3385c3",
      themeDarkAlt: "#4ba0e1",
      themeDark: "#65aee6",
      themeDarker: "#8ac2ec"
    }
  };
  
  return themeMode === "dark" ? darkTheme : (themeMode === "light" ? lightTheme : undefined);
};

const generateDesignTokens = (theme: Theme, config: Config) => {
  logger.log("generateDesignTokens - Fluent theme", theme);
  const { fonts, effects, semanticColors } = theme;
  const useThickLeftBorderOnHoverItem = config.settings.designSettings?.useThickLeftBorderOnHoverItem ?? true;
  const useShadowOnHoverItem = config.settings.designSettings?.useShadowOnHoverItem ?? false;
  // todo: detect darkMode from theme (theme.palette?.themeDark color) (not config)

  let cssVars = {
    "--rule-background": semanticColors.cardStandoutBackground,
    "--group-background": semanticColors.menuItemBackgroundHovered,
    "--rulegroup-background": semanticColors.defaultStateBackground,
    "--rulegroupext-background": semanticColors.defaultStateBackground,
    "--switch-background": semanticColors.defaultStateBackground,
    "--case-background": semanticColors.defaultStateBackground,

    "--rule-border-color": semanticColors.variantBorder,
    "--group-border-color": semanticColors.inputBorder,
    "--rulegroup-border-color": semanticColors.disabledBorder,
    "--rulegroupext-border-color": semanticColors.disabledBorder,
    "--switch-border-color": semanticColors.disabledBorder,
    "--case-border-color": semanticColors.inputFocusBorderAlt
    ,

    "--treeline-color": semanticColors.accentButtonBackground,
    "--treeline-switch-color": semanticColors.accentButtonBackground,

    "--main-text-color": semanticColors.bodyText,
    "--main-font-family": fonts.medium.fontFamily,
    "--main-font-size": fonts.medium.fontSize,
    "--item-radius": effects.roundedCorner2,
    
    // "--rule-shadow-hover": effects.elevation4,
    // "--group-shadow-hover": effects.elevation4,
    // "--rulegroup-shadow-hover": effects.elevation4,
    // "--rulegroupext-shadow-hover": effects.elevation4,
  } as Record<string, string>;


  if (useThickLeftBorderOnHoverItem) {
    cssVars = {
      ...cssVars,
      "--rule-border-left-hover": "2px",
      "--group-border-left-hover": "2px",
      "--rulegroup-border-left-hover": "2px",
      "--rulegroupext-border-left-hover": "2px",
    };
  }

  return cssVars;
};

export {
  buildTheme,
  generateDesignTokens,
};
